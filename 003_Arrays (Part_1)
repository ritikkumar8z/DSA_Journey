----------------------- *Array* ----------------------
--- In Data Structures and Algorithms (DSA), arrays are one of the simplest and most commonly used data structures.

1. What is an Array?
--- An array is a collection of elements, all of the same type, stored in contiguous memory locations. 
    Arrays allow you to store multiple values under a single variable name and access each element using its index.

2. Array Declaration :
--- To declare an array in C, you specify the data type, followed by the array name, and then the size of the array in square brackets.
    Syntax :
        data_type array_name[array_size]; 
    Example :
        int arr[5]; // declares an array of integers with size 5
        --- Here, arr can store up to 5 integers, and the elements are stored in memory in contiguous locations.---

3. Array Initialization :
--- An array can be initialized at the time of declaration by assigning values in curly braces {}.
    Example :
        int arr[5] = {1, 2, 3, 4, 5}; // array with size 5 and elements 1, 2, 3, 4, 5

    # If you initialize an array without specifying all elements, the rest are set to zero by default.
        int arr[5] = {1, 2}; // elements are {1, 2, 0, 0, 0}

    # You can also omit the array size and let the compiler determine it:
        int arr[] = {1, 2, 3}; // size is implicitly set to 3

4. Accessing Array Elements :
--- Array elements are accessed using their index, starting from 0 for the first element.
    Syntax :
        array_name[index];
    Example :
        int arr[3] = {10, 20, 30};
        printf("%d", arr[0]); // outputs 10
        printf("%d", arr[1]); // outputs 20

5. Common Array Operations -
i). Insertion : Adding an element at a specific position.
ii). Traversal : Visiting each element in the array.
iii). Search : Finding an element’s position (index) in the array.
iv). Deletion : Removing an element from a specific position.


5.1 Insertion in an Array :
--- Inserting an element at a particular index involves shifting elements to the right from the desired position.

Code -
      #include <stdio.h>
      void insert(int arr[], int *n, int pos, int value) {
          for (int i = *n - 1; i >= pos; i--) {
              arr[i + 1] = arr[i];
          }
          arr[pos] = value;
          (*n)++; // increase array size by 1
      }
      int main() {
          int arr[10] = {1, 2, 3, 4, 5};
          int n = 5; // current number of elements
          int pos = 2, value = 10;
      
          insert(arr, &n, pos, value);
          
          // Print array after insertion
          for (int i = 0; i < n; i++) {
              printf("%d ", arr[i]);
          }
          return 0;
      }
--- Explanation : The function shifts all elements from the insertion position onward, then inserts the new element and increments the array size. ---

5.2 Traversal :
--- Traversal involves visiting each element in the array. It’s a simple for or while loop iterating through each element.
Code -
      #include <stdio.h>
      void traverse(int arr[], int n) {
          for (int i = 0; i < n; i++) {
              printf("%d ", arr[i]);
          }
      }
      int main() {
          int arr[] = {1, 2, 3, 4, 5};
          int n = 5;
      
          traverse(arr, n);
          return 0;
      }

5.3 Searching in an Array :
--- Linear search is commonly used to search for an element.
Code -
      #include <stdio.h>
      int search(int arr[], int n, int key) {
          for (int i = 0; i < n; i++) {
              if (arr[i] == key)
                  return i; // Return the index of the found element
          }
          return -1; // Return -1 if the element is not found
      }
      int main() {
          int arr[] = {1, 2, 3, 4, 5};
          int n = 5;
          int key = 3;
      
          int index = search(arr, n, key);
      
          if (index != -1)
              printf("Element found at index %d", index);
          else
              printf("Element not found");
          return 0;
      }

5.4 Deletion from an Array :
--- Deleting an element from an array involves shifting elements to fill the gap.
Code -
      #include <stdio.h>
      void delete(int arr[], int *n, int pos) {
          for (int i = pos; i < *n - 1; i++) {
              arr[i] = arr[i + 1];
          }
          (*n)--; // reduce array size by 1
      }
      int main() {
          int arr[5] = {1, 2, 3, 4, 5};
          int n = 5; // current number of elements
          int pos = 2;
      
          delete(arr, &n, pos);
          
          // Print array after deletion
          for (int i = 0; i < n; i++) {
              printf("%d ", arr[i]);
          }
          return 0;
      }
--- Explanation: The function shifts all elements from the deletion position onward and reduces the array size. ---


6. Advantages and Disadvantages of Arrays :
Advantages:
--- Efficient access : Constant time (O(1)) access to any element by index.
--- Memory locality : Good cache locality due to contiguous memory allocation, improving performance.

Disadvantages:
--- Fixed size : The size of an array is static once declared.
--- Costly insertion and deletion : Inserting or deleting an element in the middle requires shifting elements, leading to O(n) complexity.


7. Array Interview Questions :
i). Find the largest/smallest element in an array.
ii). Reverse an array.
iii). Find duplicates in an array.
iv). Rotate an array by k positions.
v). Merge two sorted arrays.
--- These questions can typically be solved using simple loops or by applying common algorithms.


8. Example Code: Finding Maximum Element in an Array :
Code -
      #include <stdio.h>
      int findMax(int arr[], int n) {
          int max = arr[0];
          for (int i = 1; i < n; i++) {
              if (arr[i] > max)
                  max = arr[i];
          }
          return max;
      }
      int main() {
          int arr[] = {1, 3, 5, 2, 4};
          int n = 5;
      
          printf("Maximum element is %d", findMax(arr, n));
          return 0;
      }

Summary :
--- Arrays in C are foundational data structures that store data in contiguous memory locations. Operations like 
    insertion, deletion, search, and traversal are key to working with arrays. Understanding these 
    basics is essential for mastering data structures and algorithms.








