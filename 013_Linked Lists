----------------------------* Linked Lists *----------------------------


# Linked Lists in Data Structures and Algorithms (DSA)
--- Linked lists are a fundamental data structure used to store a collection of elements. Each element in a linked list, called a node, 
    contains data and a reference to the next node, allowing efficient insertions and deletions without the need for contiguous memory.

# Key Concepts
1. Node Structure
--- A linked list node contains:
    * Data: Stores the actual value.
    * Pointer: Refers to the next node in the list (or the previous node in the case of a doubly linked list).

            struct Node {
                int data;
                struct Node* next;
            };

2. Types of Linked Lists
--- Singly Linked List: Each node points to the next node; the last node points to NULL.
--- Doubly Linked List: Each node has two pointers, one to the next node and one to the previous node.
--- Circular Linked List: The last node points to the first node, forming a circular structure.

3. Memory Allocation
--- Linked lists are dynamically allocated, allowing them to grow or shrink as needed. Memory for each node is allocated using malloc(), 
    and it’s freed with free() when no longer needed.

4. Head and Tail Pointers
--- Head: Points to the first node, essential for accessing the list.
--- Tail: Points to the last node, often used to optimize insertions at the end.

5. Complexity Analysis
--- Insertion/Deletion at the beginning: O(1)
--- Insertion/Deletion at a specific position or the end: O(n)
--- Searching: O(n)


# Linked List Operations

1. Insertion
--- At the Beginning: Insert a new node at the start.
--- At the End: Insert a new node at the end.
--- At a Specific Position: Insert a node at a given index.
Example of insertion at the beginning:

      void insertAtBeginning(struct Node** head, int newData) {
          struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
          newNode->data = newData;
          newNode->next = *head;
          *head = newNode;
      }


2. Deletion
--- From the Beginning: Remove the first node.
--- From the End: Remove the last node.
--- From a Specific Position: Remove a node at a given position.
Example of deletion from the beginning:

        void deleteAtBeginning(struct Node** head) {
            if (*head == NULL) return;
            struct Node* temp = *head;
            *head = (*head)->next;
            free(temp);
        }


3. Searching
Traverse the linked list to check if a particular value exists.

        int search(struct Node* head, int key) {
            struct Node* current = head;
            while (current != NULL) {
                if (current->data == key) return 1;
                current = current->next;
            }
            return 0;
        }


4. Reversing a Linked List
Reverse the order of nodes in a linked list.

        void reverse(struct Node** head) {
            struct Node *prev = NULL, *current = *head, *next = NULL;
            while (current != NULL) {
                next = current->next;
                current->next = prev;
                prev = current;
                current = next;
            }
            *head = prev;
        }


5. Detecting and Removing Loops
Use Floyd’s Cycle-Finding Algorithm to detect if there’s a loop in the list.

        int detectLoop(struct Node* head) {
            struct Node *slow = head, *fast = head;
            while (fast != NULL && fast->next != NULL) {
                slow = slow->next;
                fast = fast->next->next;
                if (slow == fast) return 1;  // Loop detected
            }
            return 0;  // No loop
        }


# Complete Example Code with Output
Below is a comprehensive example of a linked list in C, covering insertion, deletion, reversal, and loop detection.

          #include <stdio.h>
          #include <stdlib.h>
          
          struct Node {
              int data;
              struct Node* next;
          };
          
          // Insert a new node at the beginning
          void insertAtBeginning(struct Node** head, int data) {
              struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
              newNode->data = data;
              newNode->next = *head;
              *head = newNode;
          }
          
          // Delete a node from the beginning
          void deleteAtBeginning(struct Node** head) {
              if (*head == NULL) return;
              struct Node* temp = *head;
              *head = (*head)->next;
              free(temp);
          }
          
          // Reverse the linked list
          void reverseList(struct Node** head) {
              struct Node *prev = NULL, *current = *head, *next = NULL;
              while (current != NULL) {
                  next = current->next;
                  current->next = prev;
                  prev = current;
                  current = next;
              }
              *head = prev;
          }
          
          // Detect a loop in the linked list
          int detectLoop(struct Node* head) {
              struct Node *slow = head, *fast = head;
              while (fast != NULL && fast->next != NULL) {
                  slow = slow->next;
                  fast = fast->next->next;
                  if (slow == fast) return 1; // Loop found
              }
              return 0;
          }
          
          // Print the linked list
          void printList(struct Node* node) {
              while (node != NULL) {
                  printf("%d -> ", node->data);
                  node = node->next;
              }
              printf("NULL\n");
          }
          
          // Free all nodes in the list
          void freeList(struct Node* head) {
              struct Node* tmp;
              while (head != NULL) {
                  tmp = head;
                  head = head->next;
                  free(tmp);
              }
          }
          
          int main() {
              struct Node* head = NULL;
          
              // Inserting nodes
              insertAtBeginning(&head, 10);
              insertAtBeginning(&head, 20);
              insertAtBeginning(&head, 30);
              printf("List after insertions: ");
              printList(head);
          
              // Deleting a node
              deleteAtBeginning(&head);
              printf("List after deleting the beginning node: ");
              printList(head);
          
              // Reversing the linked list
              reverseList(&head);
              printf("Reversed List: ");
              printList(head);
          
              // Loop detection
              printf("Loop Detected: %s\n", detectLoop(head) ? "Yes" : "No");
          
              // Free the list
              freeList(head);
              return 0;
          }

# Expected Output
      List after insertions: 30 -> 20 -> 10 -> NULL
      List after deleting the beginning node: 20 -> 10 -> NULL
      Reversed List: 10 -> 20 -> NULL
      Loop Detected: No


Summary of Topics Covered
--- Core Concepts: Nodes, pointers, head/tail, memory management, complexity analysis.
--- Types of Linked Lists: Singly, doubly, circular, and advanced types.
--- Operations: Insertion, deletion, searching, reversal, loop detection, and merging sorted lists.
--- Example Code: A complete program covering essential operations with output.


