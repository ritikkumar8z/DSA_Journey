------------------ * Insertion Sort * ----------------------


# Insertion Sort :
--- Insertion Sort is a simple comparison-based sorting algorithm. It builds the sorted array one item at a time by "inserting" each new element 
    into its correct position in the already sorted part.


# How Insertion Sort Works :
--- Assume the first element is already sorted.
--- Starting from the second element (key), compare it with the elements before it in the sorted part.
--- Shift all elements greater than key one position to the right to make space.
--- Insert key in its correct position.
--- Repeat steps 2-4 for each element until the array is fully sorted.
Example: Let's sort [12, 11, 13, 5, 6] using Insertion Sort:

Step 1: [12] | [11, 13, 5, 6] → Move 11 to the left → [11, 12] | [13, 5, 6]
Step 2: [11, 12] | [13, 5, 6] → 13 is in place.
Step 3: [11, 12, 13] | [5, 6] → Move 5 to the left → [5, 11, 12, 13] | [6]
Step 4: [5, 11, 12, 13] | [6] → Move 6 to its correct position → [5, 6, 11, 12, 13]


Code -
      #include <stdio.h>
      void insertionSort(int arr[], int n) {
          for (int i = 1; i < n; i++) {
              int key = arr[i];
              int j = i - 1;
      
              // Move elements of arr[0..i-1] that are greater than key to one position ahead
              while (j >= 0 && arr[j] > key) {
                  arr[j + 1] = arr[j];
                  j--;
              }
              arr[j + 1] = key;
          }
      }
      void printArray(int arr[], int n) {
          for (int i = 0; i < n; i++) {
              printf("%d ", arr[i]);
          }
          printf("\n");
      }
      int main() {
          int arr[] = {12, 11, 13, 5, 6};
          int n = sizeof(arr) / sizeof(arr[0]);
      
          printf("Original array: ");
          printArray(arr, n);
      
          insertionSort(arr, n);
      
          printf("Sorted array: ");
          printArray(arr, n);
          return 0;
      }


# Key Points :
i). Time Complexity:
      Best Case: O(n) — when the array is already sorted.
      Worst and Average Case: O(n^2)— for a fully unsorted array.
ii). Space Complexity: O(1)— an in-place algorithm.
iii). Stability: Insertion Sort is a stable sort, meaning it maintains the relative order of elements with equal keys.


# Use Cases :
--- Effective for small or nearly sorted arrays.
--- Commonly used in hybrid algorithms for sorting smaller chunks of data.








