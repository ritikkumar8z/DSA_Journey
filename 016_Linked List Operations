---------------------------* Linked List Operations *---------------------------

 

# Linked List Operations
--- This repository provides a comprehensive guide on implementing various operations on singly linked lists in Python. Each section includes 
    code examples and comparisons with arrays.

# Table of Contents
--- Introduction
1. Traversing a Linked List
2. Finding the Minimum Value
3. Deleting a Node
4. Inserting a Node
5. Sorting a Linked List
Linked Lists vs Arrays
Time Complexity Summary


# Introduction
--- A linked list is a linear data structure where each element, called a node, contains a data value and a reference (or link) to the next
    node in the sequence. Unlike arrays, linked lists do not have fixed memory allocation, making insertion and deletion easier, albeit at the cost
    of sequential access.

1. Traversing a Linked List
--- Traversing a linked list means going through each node from the head to the end. This operation is often used to search for specific values, 
    read or modify nodes, or perform operations like finding the minimum or maximum values.

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def traverse_and_print(head):
    current_node = head
    while current_node:
        print(current_node.data, end=" -> ")
        current_node = current_node.next
    print("null")

# Example usage:
node1 = Node(7)
node2 = Node(11)
node1.next = node2
traverse_and_print(node1)


2. Finding the Minimum Value
--- To find the lowest value, traverse the list and update a minimum variable whenever a smaller value is encountered.

def find_lowest_value(head):
    min_value = head.data
    current_node = head.next
    while current_node:
        if current_node.data < min_value:
            min_value = current_node.data
        current_node = current_node.next
    return min_value

# Example usage:
print("The lowest value is:", find_lowest_value(node1))



3. Deleting a Node
--- To delete a node, locate the previous node and adjust its next pointer to skip over the node being removed.

def delete_specific_node(head, node_to_delete):
    if head == node_to_delete:
        return head.next

    current_node = head
    while current_node.next and current_node.next != node_to_delete:
        current_node = current_node.next

    if current_node.next is None:
        return head

    current_node.next = current_node.next.next
    return head

# Example usage:
node1 = delete_specific_node(node1, node2)



4. Inserting a Node
--- Inserting involves adjusting pointers to place a new node at the desired position.

def insert_node_at_position(head, new_node, position):
    if position == 1:
        new_node.next = head
        return new_node
    
    current_node = head
    for _ in range(position - 2):
        if current_node is None:
            break
        current_node = current_node.next

    new_node.next = current_node.next
    current_node.next = new_node
    return head

# Example usage:
new_node = Node(97)
node1 = insert_node_at_position(node1, new_node, 2



5. Sorting a Linked List
--- Sorting algorithms like Selection Sort can be implemented for linked lists by repeatedly finding the minimum and reordering the list.
    Note: Sorting algorithms like Counting Sort, Radix Sort, and QuickSort arenâ€™t directly applicable to linked lists as they rely on array indexing.


# Linked Lists vs Arrays
--- Memory Allocation: Linked lists grow dynamically, while arrays require contiguous memory allocation.
--- Node Positioning: Linked lists require traversal for accessing elements, unlike arrays that allow direct indexing.
--- Memory Overhead: Linked list nodes require extra space for storing links.
--- Programming Complexity: Linked lists are more complex to implement than arrays.


Time Complexity Summary
Traversal/Search: O(n)
Insertion at Head: O(1)
Insertion at Tail: O(n)
Deletion: O(n)

